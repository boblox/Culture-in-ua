@inherits UmbracoTemplatePage
@{
    Layout = "umbLayout.cshtml";

    // If the editor has not explicitly provided the "Page title" property page
    // then just show the name of the page otherwise show the provided title
    var pageTitle = string.IsNullOrWhiteSpace(CurrentPage.Title)
        ? CurrentPage.Name
        : CurrentPage.Title;

    var childGalleries = CurrentPage.Galleries;

    var mediaStr = (string)CurrentPage.Images;
    var mediaIds = mediaStr.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
    var media = Umbraco.TypedMedia(mediaIds).ToList();
    //check for folders
    var folders = media.Where(i => i.DocumentTypeAlias == "Folder").ToList();
    folders.ForEach(i => media.Remove(i));
    media.AddRange(folders.SelectMany(i => i.Children.Where(j => j.DocumentTypeAlias == "Image")));

    const int subGalleriesPerRow = 6;
    const int imagesPerRow = 6;
}

@helper RenderSubGalleryRow(dynamic childGalleries)
{
    <div class="row">
        @foreach (var item in childGalleries)
        {
            // If the editor has not explicitly provided the "Page title" property page
            // then just show the name of the page otherwise show the provided title
            var title = string.IsNullOrWhiteSpace(item.Title)
                ? item.Name
                : item.Title;

            <div class="3u">
                <section class="gallery-sub-gallery-item">
                    @if (string.IsNullOrWhiteSpace(item.Image) == false)
                    {
                        <a href="@item.Url" class="image image-full">
                            <img src="@Html.GetThumbnailUrl((string)item.Image)" alt="" />
                        </a>
                    }
                    <h3><a href="@item.Url">@title</a></h3>
                </section>
            </div>
        }
    </div>
}

@helper RenderImagesRow(dynamic images)
{
    <div class="row half">
        @foreach (var item in images)
        {
            <div class="2u">
                <section class="gallery-image-item">
                    @if (!string.IsNullOrWhiteSpace(item.Url))
                    {
                        <a href="@item.Url" class="image image-full" title="@item.Name">
                            <img src="@Html.GetThumbnailUrl((string)item.Url)" alt="" />
                        </a>
                    }
                </section>
            </div>
        }
    </div>
}

@section Scripts
{
    <script src="/js/magnific.popup.min.js"></script>
    <link rel="stylesheet" href="/css/magnific-popup.css" />
}

<div id="main-wrapper">
    <div id="main" class="container">
        <div class="row">
            <!-- Content -->
            <div class="12u">
                <article class="content">
                    <header>
                        <h1>@pageTitle</h1>
                    </header>

                    <section class="is-gallery">
                        @{ Html.RenderPartial("/Views/Partials/Breadcrumb.cshtml"); }

                        <!--Render each itemsPerRow items in row-->
                        @for (int i = 0; i < (childGalleries.Count() + subGalleriesPerRow - 1) / subGalleriesPerRow; i++)
                        {
                            @RenderSubGalleryRow(childGalleries.Skip(i * subGalleriesPerRow).Take(subGalleriesPerRow))
                        }
                        @for (int i = 0; i < (media.Count() + imagesPerRow - 1) / imagesPerRow; i++)
                        {
                            @RenderImagesRow(media.Skip(i * imagesPerRow).Take(imagesPerRow))
                        }
                    </section>
                </article>
            </div>
            <!-- /Content -->
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('.gallery-image-item').magnificPopup({
            type: 'image',
            delegate: 'a',
            image: {
                //titleSrc: 'title',
                cursor: null
            },
            gallery: {
                enabled: true,
                preload: [0, 1],
            },
            mainClass: 'mfp-fade',
            removalDelay: 300
        });
    });
</script>